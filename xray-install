#!/bin/bash
set -e

### 0.  Basic packages #########################################################
apt update
apt install -y curl jq qrencode unzip openssl

### 1.  Enable BBR if not already #############################################
if sysctl -n net.ipv4.tcp_congestion_control | grep -q bbr; then
    echo "[+] BBR already enabled"
else
    echo "[+] Enabling BBR"
    {
      echo "net.core.default_qdisc=fq"
      echo "net.ipv4.tcp_congestion_control=bbr"
    } >> /etc/sysctl.conf
    sysctl -p
fi

### 2.  Install Xray (fixed version, no API) ##################################
XRAY_VERSION="v25.6.8"
XRAY_ZIP="Xray-linux-64.zip"
INSTALL_DIR="/usr/local/bin"
CONFIG_DIR="/usr/local/etc/xray"
DAT_DIR="/usr/local/share/xray"

mkdir -p "$CONFIG_DIR" "$DAT_DIR"
cd /tmp
echo "[+] Downloading Xray $XRAY_VERSION …"
wget -q "https://github.com/XTLS/Xray-core/releases/download/${XRAY_VERSION}/${XRAY_ZIP}" -O xray.zip
unzip -o xray.zip xray -d "$INSTALL_DIR"
chmod +x "$INSTALL_DIR/xray"
rm -f xray.zip
echo "[+] Xray installed to $INSTALL_DIR/xray"

### 3.  Download geosite / geoip ##############################################
echo "[+] Downloading geosite / geoip …"
curl -Lo "$DAT_DIR/geosite.dat" \
     https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
curl -Lo "$DAT_DIR/geoip.dat" \
     https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
# продублируем рядом с бинарником — Xray ищет сначала там
cp "$DAT_DIR"/*.dat "$INSTALL_DIR/"

### 4.  Generate keys & UUID ###################################################
KEYFILE="$CONFIG_DIR/.keys"
UUID=$("$INSTALL_DIR/xray" uuid)
{
  echo "uuid: $UUID"
  "$INSTALL_DIR/xray" x25519
  echo "shortsid: $(openssl rand -hex 8)"
} > "$KEYFILE"

PRIV_KEY=$(awk -F': ' '/Private key/ {print $2}' "$KEYFILE")
PUB_KEY=$(awk  -F': ' '/Public key/  {print $2}' "$KEYFILE")
SHORT_ID=$(awk -F': ' '/shortsid/   {print $2}' "$KEYFILE")

### 5.  Write config.json (VLESS + Reality) ####################################
cat > "$CONFIG_DIR/config.json" <<EOF
{
  "log": { "loglevel": "warning" },
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      { "type": "field", "domain": ["geosite:category-ads-all"], "outboundTag": "block" },
      { "type": "field", "ip": ["geoip:cn"], "outboundTag": "block" }
    ]
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 443,
      "protocol": "vless",
      "settings": {
        "clients": [
          { "id": "$UUID", "email": "main", "flow": "xtls-rprx-vision" }
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "github.com:443",
          "xver": 0,
          "serverNames": ["github.com","www.github.com"],
          "privateKey": "$PRIV_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      },
      "sniffing": { "enabled": true, "destOverride": ["http","tls"] }
    }
  ],
  "outbounds": [
    { "protocol": "freedom",  "tag": "direct" },
    { "protocol": "blackhole","tag": "block"  }
  ],
  "policy": { "levels": { "0": { "handshake": 3, "connIdle": 180 } } }
}
EOF
echo "[+] Config written to $CONFIG_DIR/config.json"

### 6.  Systemd service ########################################################
SERVICE_FILE="/etc/systemd/system/xray.service"
cat > "$SERVICE_FILE" <<EOF
[Unit]
Description=Xray Service
After=network.target nss-lookup.target

[Service]
ExecStart=$INSTALL_DIR/xray run -config $CONFIG_DIR/config.json
Restart=on-failure
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable xray
systemctl restart xray
echo "[+] Xray service started"

### 7.  Helper scripts #########################################################
# --- mainuser ---
cat > /usr/local/bin/mainuser <<'EOS'
#!/bin/bash
cfg="/usr/local/etc/xray/config.json"
keys="/usr/local/etc/xray/.keys"

proto=$(jq -r '.inbounds[0].protocol' "$cfg")
port=$(jq -r '.inbounds[0].port' "$cfg")
uuid=$(awk -F': ' '/uuid/ {print $2}' "$keys")
pbk=$(awk  -F': ' '/Public key/ {print $2}' "$keys")
sid=$(awk  -F': ' '/shortsid/  {print $2}' "$keys")
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' "$cfg")
ip=$(curl -s icanhazip.com)

link="$proto://$uuid@$ip:$port?security=reality&sni=$sni&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#vless-$ip"
echo -e "\nConnection link:\n$link\n"
echo "QR code:"
echo "$link" | qrencode -t ansiutf8
EOS
chmod +x /usr/local/bin/mainuser

# --- userlist ---
cat > /usr/local/bin/userlist <<'EOS'
#!/bin/bash
cfg="/usr/local/etc/xray/config.json"
emails=( $(jq -r '.inbounds[0].settings.clients[].email' "$cfg") )
[[ ${#emails[@]} -eq 0 ]] && { echo "No users found."; exit 0; }
for i in "${!emails[@]}"; do
  printf "%2d) %s\n" $((i+1)) "${emails[$i]}"
done
EOS
chmod +x /usr/local/bin/userlist

# --- newuser ---
cat > /usr/local/bin/newuser <<'EOS'
#!/bin/bash
cfg="/usr/local/etc/xray/config.json"
read -rp "Enter new user e-mail: " email
[[ -z $email ]] && { echo "Empty email – abort."; exit 1; }
if jq -e --arg e "$email" '.inbounds[0].settings.clients[].email|select(.==$e)' "$cfg" >/dev/null; then
  echo "User already exists."; exit 1
fi
uuid=$(xray uuid)
tmp=$(mktemp)
jq --arg e "$email" --arg u "$uuid" \
   '.inbounds[0].settings.clients += [{"email":$e,"id":$u,"flow":"xtls-rprx-vision"}]' \
   "$cfg" > "$tmp" && mv "$tmp" "$cfg"
systemctl restart xray
echo "User created."
/usr/local/bin/sharelink "$email"
EOS
chmod +x /usr/local/bin/newuser

# --- rmuser ---
cat > /usr/local/bin/rmuser <<'EOS'
#!/bin/bash
cfg="/usr/local/etc/xray/config.json"
emails=( $(jq -r '.inbounds[0].settings.clients[].email' "$cfg") )
[[ ${#emails[@]} -eq 0 ]] && { echo "No users to delete."; exit 0; }
for i in "${!emails[@]}"; do printf "%2d) %s\n" $((i+1)) "${emails[$i]}"; done
read -rp "Choose user to delete: " idx
(( idx>=1 && idx<=${#emails[@]} )) || { echo "Invalid choice"; exit 1; }
email="${emails[$((idx-1))]}"
tmp=$(mktemp)
jq --arg e "$email" '(.inbounds[0].settings.clients) |= map(select(.email!=$e))' "$cfg" > "$tmp" && mv "$tmp" "$cfg"
systemctl restart xray
echo "User $email deleted."
EOS
chmod +x /usr/local/bin/rmuser

# --- sharelink ---
cat > /usr/local/bin/sharelink <<'EOS'
#!/bin/bash
cfg="/usr/local/etc/xray/config.json"
keys="/usr/local/etc/xray/.keys"

choose_email() {
  emails=( $(jq -r '.inbounds[0].settings.clients[].email' "$cfg") )
  [[ -n $1 ]] && { for e in "${emails[@]}"; do [[ $e == "$1" ]] && { echo "$e"; return; }; done; }
  for i in "${!emails[@]}"; do printf "%2d) %s\n" $((i+1)) "${emails[$i]}"; done
  read -rp "Choose user: " idx
  (( idx>=1 && idx<=${#emails[@]} )) || { echo "Invalid choice"; exit 1; }
  echo "${emails[$((idx-1))]}"
}

email=$(choose_email "$1")
uuid=$(jq -r --arg e "$email" '.inbounds[0].settings.clients[]|select(.email==$e).id' "$cfg")
proto=$(jq -r '.inbounds[0].protocol' "$cfg")
port=$(jq -r '.inbounds[0].port' "$cfg")
pbk=$(awk -F': ' '/Public key/ {print $2}' "$keys")
sid=$(awk -F': ' '/shortsid/ {print $2}' "$keys")
sni=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' "$cfg")
ip=$(curl -s icanhazip.com)

link="$proto://$uuid@$ip:$port?security=reality&sni=$sni&fp=firefox&pbk=$pbk&sid=$sid&spx=/&type=tcp&flow=xtls-rprx-vision&encryption=none#$email"
echo -e "\nConnection link for $email:\n$link\n"
echo "QR code:"
echo "$link" | qrencode -t ansiutf8
EOS
chmod +x /usr/local/bin/sharelink

### 8.  OPTIONAL: create ~/help cheat-sheet ####################################
cat > "$HOME/help" <<'EOF'
Xray user-management commands:

    mainuser   – show main user link & QR
    userlist   – list every user
    newuser    – create a new user
    rmuser     – delete a user
    sharelink  – choose user and print link / QR

Config file:

    /usr/local/etc/xray/config.json

Restart Xray:

    systemctl restart xray
EOF
chmod 644 "$HOME/help"

### 9.  Final banner ###########################################################
echo -e "\n[✓] Installation complete. Use the following commands:\n
  mainuser   - show main user link & QR
  userlist   - list users
  newuser    - add user
  rmuser     - remove user
  sharelink  - choose user and print link/QR\n"

mainuser
